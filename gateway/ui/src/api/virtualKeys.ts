import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

// Define the VirtualKey type based on expected API response
export interface VirtualKey {
  id: string;
  key: string; // The virtual key string itself (potentially masked or partially hidden)
  name?: string; // Optional name for the key
  description?: string; // Optional description
  providerIds: string[]; // IDs of associated providers
  strategyId?: string; // ID of an associated strategy/config
  usageLimits?: {
    maxTokens?: number;
    maxRequests?: number;
    // other limit types
  };
  permissions?: string[]; // e.g., ['read', 'write'] or specific model permissions
  metadata?: Record<string, any>;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

// Define the type for creating/updating a virtual key
// Key might be generated by backend, so it could be optional on creation
export interface VirtualKeyInput extends Omit<VirtualKey, 'id' | 'key' | 'createdAt' | 'updatedAt'> {
  key?: string; // Allow sending if user can define, otherwise backend generates
}


const API_BASE_URL = '/v1'; // Handled by Nginx proxy

// Fetch all virtual keys
export const useGetVirtualKeys = () => {
  return useQuery<VirtualKey[], Error>({
    queryKey: ['virtualKeys'],
    queryFn: async () => {
      const response = await fetch(`${API_BASE_URL}/virtual-keys`);
      if (!response.ok) {
        throw new Error('Failed to fetch virtual keys');
      }
      return response.json();
    },
  });
};

// Add a new virtual key
export const useAddVirtualKey = () => {
  const queryClient = useQueryClient();
  return useMutation<VirtualKey, Error, VirtualKeyInput>({
    mutationFn: async (newVirtualKey) => {
      const response = await fetch(`${API_BASE_URL}/virtual-keys`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newVirtualKey),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Failed to add virtual key' }));
        throw new Error(errorData.message || 'Failed to add virtual key');
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['virtualKeys'] });
    },
  });
};

// Update an existing virtual key
export const useUpdateVirtualKey = () => {
  const queryClient = useQueryClient();
  return useMutation<VirtualKey, Error, VirtualKey & { id: string }>({
    mutationFn: async (updatedVirtualKey) => {
      const response = await fetch(`${API_BASE_URL}/virtual-keys/${updatedVirtualKey.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedVirtualKey),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Failed to update virtual key' }));
        throw new Error(errorData.message || 'Failed to update virtual key');
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['virtualKeys'] });
    },
  });
};

// Delete a virtual key
export const useDeleteVirtualKey = () => {
  const queryClient = useQueryClient();
  return useMutation<void, Error, string>({ // string for virtualKeyId
    mutationFn: async (virtualKeyId) => {
      const response = await fetch(`${API_BASE_URL}/virtual-keys/${virtualKeyId}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Failed to delete virtual key' }));
        throw new Error(errorData.message || 'Failed to delete virtual key');
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['virtualKeys'] });
    },
  });
};
